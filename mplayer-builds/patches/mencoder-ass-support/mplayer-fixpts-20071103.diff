Index: libmpcodecs/Makefile
===================================================================
--- libmpcodecs/Makefile	(revision 24928)
+++ libmpcodecs/Makefile	(working copy)
@@ -52,6 +52,7 @@
               vf_field.c \
               vf_fil.c \
               vf_filmdint.c \
+              vf_fixpts.c \
               vf_flip.c \
               vf_format.c \
               vf_framestep.c \
Index: libmpcodecs/vf_fixpts.c
===================================================================
--- libmpcodecs/vf_fixpts.c	(revision 0)
+++ libmpcodecs/vf_fixpts.c	(revision 0)
@@ -0,0 +1,137 @@
+/*
+    Copyright (C) 2007 Nicolas George <nicolas.george@normalesup.org>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+*/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <inttypes.h>
+
+#include "config.h"
+#include "mp_msg.h"
+#include "help_mp.h"
+
+#include "img_format.h"
+#include "mp_image.h"
+#include "vf.h"
+
+struct vf_priv_s {
+    double current;
+    double step;
+    int autostart;
+    int autostep;
+    unsigned have_step: 1;
+    unsigned print: 1;
+};
+
+static int put_image(vf_instance_t *vf, mp_image_t *src, double pts)
+{
+    struct vf_priv_s *p = vf->priv;
+
+    if(p->print) {
+	if(pts == MP_NOPTS_VALUE)
+	    printf("PTS: undef\n");
+	else
+	    printf("PTS: %f\n", pts);
+    }
+    if(pts != MP_NOPTS_VALUE && p->autostart != 0) {
+	p->current = pts;
+	if(p->autostart > 0)
+	    p->autostart--;
+    } else if(pts != MP_NOPTS_VALUE && p->autostep > 0) {
+	p->step = pts - p->current;
+	p->current = pts;
+	p->autostep--;
+	p->have_step = 1;
+    } else if(p->have_step) {
+	p->current += p->step;
+	pts = p->current;
+    } else {
+	pts = MP_NOPTS_VALUE;
+    }
+    return vf_next_put_image(vf, src, pts);
+}
+
+static void uninit(vf_instance_t *vf)
+{
+    free(vf->priv);
+}
+
+static int parse_args(struct vf_priv_s *p, const char *args)
+{
+    int pos;
+    double num, denom = 1;
+    int iarg;
+
+    while(*args != 0) {
+	pos = 0;
+	if(sscanf(args, "print%n", &pos) == 0 && pos > 0) {
+	    p->print = 1;
+	} else if(sscanf(args, "fps=%lf%n/%lf%n", &num, &pos, &denom, &pos) >= 1
+	    && pos > 0) {
+	    p->step = denom / num;
+	    p->have_step = 1;
+	} else if(sscanf(args, "start=%lf%n", &num, &pos) >= 1 && pos > 0) {
+	    p->current = num;
+	} else if(sscanf(args, "autostart=%d%n", &iarg, &pos) == 1 && pos > 0) {
+	    p->autostart = iarg;
+	} else if(sscanf(args, "autofps=%d%n", &iarg, &pos) == 1 && pos > 0) {
+	    p->autostep = iarg;
+	} else {
+	    mp_msg(MSGT_VFILTER, MSGL_FATAL,
+		"fixpts: unknown suboption: %s\n", args);
+	    return 0;
+	}
+	args += pos;
+	if(*args == ':')
+	    args++;
+    }
+    return 1;
+}
+
+static int open(vf_instance_t *vf, char *args)
+{
+    struct vf_priv_s *p;
+    struct vf_priv_s ptmp = {
+	.current = 0,
+	.step = 0,
+	.autostart = 0,
+	.autostep = 0,
+	.have_step = 0,
+	.print = 0,
+    };
+
+    if(!parse_args(&ptmp, args == NULL ? "" : args))
+	return 0;
+
+    vf->put_image = put_image;
+    vf->uninit = uninit;
+    vf->priv = p = malloc(sizeof(struct vf_priv_s));
+    *p = ptmp;
+    p->current = -p->step;
+
+    return 1;
+}
+
+vf_info_t vf_info_fixpts = {
+  "Fix presentation timestamps",
+  "fixpts",
+  "Nicolas George",
+  "",
+  &open,
+  NULL
+};
Index: libmpcodecs/vf.c
===================================================================
--- libmpcodecs/vf.c	(revision 24928)
+++ libmpcodecs/vf.c	(working copy)
@@ -99,6 +99,7 @@
 extern vf_info_t vf_info_blackframe;
 extern vf_info_t vf_info_geq;
 extern vf_info_t vf_info_ow;
+extern vf_info_t vf_info_fixpts;
 
 // list of available filters:
 static vf_info_t* filter_list[]={
@@ -193,6 +194,7 @@
     &vf_info_yadif,
     &vf_info_blackframe,
     &vf_info_ow,
+    &vf_info_fixpts,
     NULL
 };
 
Index: DOCS/man/en/mplayer.1
===================================================================
--- DOCS/man/en/mplayer.1	(revision 24928)
+++ DOCS/man/en/mplayer.1	(working copy)
@@ -6946,6 +6946,48 @@
 Threshold below which a pixel value is considered black (default: 32).
 .RE
 .
+.TP
+.B fixpts[=options]
+Fixes the presentation timestamps (PTS) of the frames.
+By default, the PTS passed to the next filter is dropped, but the following
+options can change that:
+.RSs
+.IPs print
+Print the incoming PTS.
+.IPs fps=<fps>
+Specify a frame per second value.
+.IPs start=<pts>
+Specify an initial value for the PTS.
+.IPs autostart=<n>
+Uses the 
+.IR n th
+incoming PTS as the initial PTS.
+All previous pts are kept, so setting a huge value or \-1 keeps the PTS
+intact.
+.IPs autofps=<n>
+Uses the 
+.IR n th
+incoming PTS after the end of autostart to determine the framerate.
+.RE
+.sp 1
+.RS
+.I EXAMPLE:
+.RE
+.PD 0
+.RSs
+.IPs "\-vf fixpts=fps=24000/1001,ass,fixpts"
+Generates a new sequence of PTS, uses it for ASS subtitles, then drops it.
+Generating a new sequence is useful when the timestamps are reset during the
+program; this is frequent on DVDs.
+Dropping it may be necessary to avoid confusing encoders.
+.RE
+.PD 1
+.sp 1
+.RS
+.I NOTE:
+Using this filter together with any sort of seeking (including -ss and EDLs)
+may make demons fly out of your nose.
+.RE
 .
 .
 .SH "GENERAL ENCODING OPTIONS (MENCODER ONLY)"
